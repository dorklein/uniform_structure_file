import { DocumentItem, HasBranches, Row } from '../types'
import { isValidDate } from '../utils/validators'

export const D110Schema: Row<DocumentItem> = {
  cells: [
    {
      default: 'D110',
      required: true,
      length: 4,
      startAt: 1,
      endAt: 4,
      type: 'string',
      name: 'recordCode',
      description: 'קוד רשומה',
      fieldId: 1250,
    },
    {
      required: true,
      length: 9,
      startAt: 5,
      endAt: 13,
      type: 'number',
      name: 'runningNumber',
      description: 'מס רשומה בקובץ',
      fieldId: 1251,
    },
    {
      required: true,
      length: 9,
      startAt: 14,
      endAt: 22,
      type: 'number',
      name: 'business.taxId',
      description: 'מס עוסק מורשה',
      fieldId: 1252,
    },
    {
      required: true,
      length: 3,
      startAt: 23,
      endAt: 25,
      type: 'number',
      name: 'documentType',
      description: 'סוג המסמך',
      fieldId: 1253,
    },
    {
      required: true,
      length: 20,
      startAt: 26,
      endAt: 45,
      type: 'string',
      name: 'documentNumber',
      description: 'מספר המסמך',
      fieldId: 1254,
    },
    {
      required: true,
      length: 4,
      startAt: 46,
      endAt: 49,
      type: 'number',
      name: 'lineNumber',
      description: 'מספר שורה במסמך',
      fieldId: 1255,
    },
    {
      required: false,
      length: 3,
      startAt: 50,
      endAt: 52,
      type: 'number',
      name: 'documentTypeBase',
      description: 'סוג מסמך בסיס',
      fieldId: 1256,
    },
    {
      required: false,
      length: 20,
      startAt: 53,
      endAt: 72,
      type: 'string',
      name: 'documentNumberBase',
      description: 'מספר מסמך בסיס',
      fieldId: 1257,
    },
    {
      required: true,
      length: 1,
      startAt: 73,
      endAt: 73,
      type: 'number',
      name: 'transactionType',
      description: 'סוג עסקה',
      fieldId: 1258,
    },
    {
      required: false,
      length: 20,
      startAt: 74,
      endAt: 93,
      type: 'string',
      name: 'catalogId',
      description: 'מק"ט פנימי',
      fieldId: 1259,
    },
    {
      required: true,
      length: 30,
      startAt: 94,
      endAt: 123,
      type: 'string',
      name: 'description',
      description: 'תיאור הטובין שנמכר או\nהשירות שניתן',
      fieldId: 1260,
    },
    {
      required: false,
      length: 50,
      startAt: 124,
      endAt: 173,
      type: 'string',
      name: 'manufacturerName',
      description: 'שם היצרן',
      fieldId: 1261,
    },
    {
      required: false,
      length: 30,
      startAt: 174,
      endAt: 203,
      type: 'string',
      name: 'manufacturerSerialNumber',
      description: 'מספר סידורי של המוצר המוטבע על המוצר על ידי\nהיצרן',
      fieldId: 1262,
    },
    {
      default: 'יחידה',
      required: false,
      length: 20,
      startAt: 204,
      endAt: 223,
      type: 'string',
      name: 'unitOfMeasure',
      description: 'תיאור יחידת המידה',
      fieldId: 1263,
    },
    {
      required: true,
      length: 17,
      startAt: 224,
      endAt: 240,
      type: 'positive',
      name: 'quantity',
      description: 'הכמות',
      fieldId: 1264,
    },
    {
      required: true,
      length: 15,
      startAt: 241,
      endAt: 255,
      type: 'positive',
      name: 'unitPriceExcludingVAT',
      description: 'מחיר ליחידה ללא מע"מ',
      fieldId: 1265,
    },
    {
      default: '0',
      required: false,
      length: 15,
      startAt: 256,
      endAt: 270,
      type: 'negative',
      name: 'lineDiscount',
      description: 'הנחת שורה',
      fieldId: 1266,
      validator: (value, item) => {
        const { quantity, unitPriceExcludingVAT } = item
        const expected = +quantity * +unitPriceExcludingVAT

        return (
          +(value ?? 0) < expected ||
          `[1266:lineDiscount] lineDiscount can't be bigger than ${expected}. Got ${value}`
        )
      },
    },
    {
      required: true,
      length: 15,
      startAt: 271,
      endAt: 285,
      type: 'positive',
      name: 'lineTotal',
      description: 'סך סכום לשורה',
      fieldId: 1267,
      validator: (value, item) => {
        const { quantity, unitPriceExcludingVAT, lineDiscount } = item

        const expected =
          +quantity * +unitPriceExcludingVAT - +(lineDiscount ?? 0)

        return (
          value === `${expected}` ||
          `[1267:lineTotal] Expected ${expected}. Got ${value}`
        )
      },
    },
    {
      required: true,
      length: 4,
      startAt: 286,
      endAt: 289,
      type: 'number',
      name: 'lineVATRate',
      description: 'שיעור המע"מ בשורה',
      fieldId: 1268,
    },
    {
      required: (input) => input.business.hasBranches === HasBranches.YES,
      length: 7,
      startAt: 290,
      endAt: 296,
      type: 'string',
      name: 'business.branchId',
      description: 'מזהה סניף/ענף',
      fieldId: 1270,
    },
    {
      required: true,
      length: 8,
      startAt: 297,
      endAt: 304,
      type: 'date',
      name: 'documentDate',
      description: 'תאריך המסמך',
      fieldId: 1272,
      validator: isValidDate,
    },
    {
      required: true,
      length: 7,
      startAt: 305,
      endAt: 311,
      type: 'number',
      name: 'linkField',
      description: 'שדה מקשר לכותרת',
      fieldId: 1273,
    },
    {
      required: (input) => input.business.hasBranches === HasBranches.YES,
      length: 7,
      startAt: 312,
      endAt: 318,
      type: 'string',
      name: 'business.branchId',
      description: 'מזהה סניף/ענף למסמך\nבסיס',
      fieldId: 1274,
    },
    {
      required: false,
      length: 21,
      startAt: 319,
      endAt: 339,
      type: 'string',
      name: 'forFutureData',
      description: 'שטח לנתונים עתידיים',
      fieldId: 1275,
    },
  ],
}
